#!/bin/sh
#//////////////////////////////////////////////////
#//DESLinux Boot Loader
#//     (C)2014-2022 Dark Embedded Systems.
#//     http://xprj.net/
#//////////////////////////////////////////////////
MARKER_FILE='.deslroot';
ROOTFS_FILE='DESLinux_rootfs.tar';
ROOT_MOUNT_DIR='/mnt/root';			# In all patterns, location treated as root will mount here.
ROOT_DIR_MOUNT_DIR='/mnt/rootdir';		# If 'rootdir=' option, real root device will mount here. bind 'rootdir=' to 'ROOT_MOUNT_DIR'

# Supported kernel cmdlines:
#	root=/path/...		Path to root block device. This will mount to "/mnt/root"
#	rootdir=/path/...	Path to chroot (Add prefix: "/mnt/root" automatically. MUST BEGIN WITH '/')

main(){
	load_cmdline;
	MARKER_FILE="${CMD_rootmarker:-.deslroot}"
	ROOTFS_FILE="${CMD_rootfiles:-DESLinux_rootfs.tar}"

	mount_fs;
	return 0;
}

error_root(){
	echo "Failed to detect root device." >&3
	echo "No '${MARKER_FILE}' file found in any block devices." >&4

	echo "Or set the 'root' or 'rootmarker' command line" >&6
	echo "to configure manually." >&7
	exit 31;
}

# If error: return 1
load_cmdline(){
	local IFS=$' ';
	for kv in `cat /proc/cmdline`; do
		IFS=$'=';
		set -- ${kv}
		local K="${1}";
		shift
		local V="${*:--}";
		eval CMD_${K//-/_}=\"${V}\";
	done
	return 0;
}

mountex(){ # dev, dir, rw
	local MOUNT_DEV=${1};
	local MOUNT_DIR=${2};
	local MOUNT_RW=${3:-rw}

	ntfs-3g -o ${MOUNT_RW},acl "${MOUNT_DEV}" "${MOUNT_DIR}" && return 0;

	mount -o "${MOUNT_RW}" "${MOUNT_DEV}" "${MOUNT_DIR}" && return 0;

	return 1;
}

get_devname(){
	for ue in `cat "${1}/uevent"`; do
		case ${ue} in
			DEVNAME=*)
				echo "${ue#*=}"
				return 0;
			;;
		esac
	done
	echo ''
	return 1;
}

detect_root(){ # MountDir
	local MOUNT_DIR=${1};
	local MOUNT_RW=${2:-rw};

	mkdir -p "${MOUNT_DIR}"

	local DEV;
	for mm in /sys/dev/block/*; do
		DEV=`get_devname "${mm}" || devmm2name block "${mm}"`;

		echo " Checking '${DEV}'..."
		[ "${DEV}" == '' ] && continue

		mountex "/dev/${DEV}" "${MOUNT_DIR}" ${MOUNT_RW} 2>/dev/null

		[ -e "${MOUNT_DIR}/${MARKER_FILE}" ] && return 0;
		[ -e "${MOUNT_DIR}/${ROOTFS_FILE}" ] && return 0;

		umount "${MOUNT_DIR}" 2>/dev/null
	done
	return 1;
}

bind_rootdir(){
	local MOUNT_DIR=${1};
	[ "${CMD_rootdir:--}" = '-' ] && return 0;

	mkdir -p "${MOUNT_DIR}"
	mount -o bind "${ROOT_DIR_MOUNT_DIR}/${CMD_rootdir}" "${MOUNT_DIR}" || return 1;

	return 0;
}

mount_rootfs(){ # MountDir
	local MOUNT_DIR=${1};
	umount "${ROOT_DIR_MOUNT_DIR}" 2>/dev/null
	umount "${ROOT_MOUNT_DIR}" 2>/dev/null

	# 'rootdir=' option: mount to ROOT_DIR_MOUNT_DIR, bind to MOUNT_DIR
	[ "${CMD_rootdir:--}" != '-' ] && MOUNT_DIR=${ROOT_DIR_MOUNT_DIR};

	mkdir -p "${MOUNT_DIR}"

	# Pattern root/1: 'root=' specified. no detect
	# 	1) mount 'root='
	[ "${CMD_root:--}" != '-' ] && {
		mountex "${CMD_root}" "${MOUNT_DIR}" || return 1;
		bind_rootdir "${1}" || return 1;
		return 0;
	}

	# Pattern root/2: 'rootmarker=', 'root' without options or not specified any root selector.
	#	1) detect devices have 'rootmarker'
	#	2) mount detected to MOUNT_DIR
	detect_root "${MOUNT_DIR}" || return 1;
	bind_rootdir "${1}" || return 1;

	return 0;
}

mount_fs(){

	# Detect 10 times in 30 secs (no `seq` or another external programs)
	for i in 0 1 1 1 2 2 3 5 5 10; do
		echo 'Detecting root device...'
		sleep ${i}
		mount_rootfs ${ROOT_MOUNT_DIR} && return ${?};
	done

	error_root;
	return 1; # Never reach here
}

main "${@}";

exit 0;

